> openAI (https://platform.openai.com/docs/guides/text-generation/text-generation-models)
텍스트 생성 모델
: OpenAI의 텍스트 생성 모델(종종 사전 훈련된 생성 변환기 또는 대규모 언어 모델이라고도 함)은 자연어, 코드 및 이미지를 이해하도록 훈련되었습니다.
모델은 입력에 대한 응답으로 텍스트 출력을 제공합니다. 이러한 모델에 대한 입력을 "프롬프트"라고도 합니다. 
프롬프트 디자인은 기본적으로 대규모 언어 모델 모델을 "프로그래밍"하는 방법으로, 일반적으로 작업을 성공적으로 완료하는 방법에 대한 지침이나 몇 가지 예를 제공합니다.

from openai import OpenAI
client = OpenAI()

response = client.chat.completions.create(
  model="gpt-3.5-turbo",
  messages=[
    {"role": "system", "content": "You are a helpful assistant."},
    {"role": "user", "content": "Who won the world series in 2020?"},
    {"role": "assistant", "content": "The Los Angeles Dodgers won the World Series in 2020."},
    {"role": "user", "content": "Where was it played?"}
  ]
)

- 주요 입력은 message 매개변수입니다. 메시지는 메시지 개체의 배열이어야 하며, 각 개체에는 역할과 콘텐츠가 있습니다.
- 역할(system 시스템, user 사용자, assistant 도우미)
- 대화는 하나의 메시지만큼 짧을 수도 있고 여러 번 주고받을 수도 있습니다.

- 일반적으로 대화는 먼저 시스템 메시지로 형식화되고, 이어서 사용자 메시지와 보조자 메시지가 교대로 표시됩니다.

- system message
시스템 메시지는 어시스턴트의 동작을 설정하는데 도움이 됩니다.
예를 들어, 어시스턴트의 성격을 수정하거나 대화 전반에 걸쳐 어시스턴트가 어떻게 생동해야 하는지에 대한 구체적인 지침을 제공할 수 있습니다.
그러나 시스템 메시지는 선택사항이며 시스템 메시지가 없는 모델의 동작은 일반적인 메시지를 사용하는 것과 유사할 가능성이 높습니다.

- user messages
사용자 메시지는 보조자가 응답할 요청이나 설명을 제공합니다.
보조 메시지는 이전 보조 응답을 저장하지만, 원하는 동작의 예를 제공하기 위해 사용자가 작성할 수도 있습니다.

코드 설명
response = client.chat.completions.create : 채팅 대화를 생성하는 요청을 보냄.
messages :  대화의 이전 메시지들을 나타내는 리스트입니다. 
여기서 각 메시지는 role (시스템, 사용자 또는 어시스턴트)과 content (메시지의 내용)으로 구성됩니다.


# 추가 참고
# https://m.blog.naver.com/daddy-bear-life/223040571989

import openai

def main():

  openai.api_key = "YOUR_API_KEY"

  response = openai.ChatCompletion.create(  # 채팅 대화를 생성하는 요청을 보냄
    model="gpt-3.5-turbo",
    messages=[
          {"role": "system", "content": "You are a helpful assistant."},
          {"role": "user", "content": "Who won the world series in 2020?"},
          {"role": "assistant", "content": "The Los Angeles Dodgers won the World Series in 2020."},
          {"role": "user", "content": "Where was it played?"}
      ]
  )

  output_text = response["choices"][0]["message"]["content"]
  print(output_text)

# system : ChatGPT에게 어떻게 행동을 할지 지정하는 기능. ChatGPT에서 상황을 설정할때 주로 사용하는 Act as a ___ 와 유사한 명령을 내릴때 사용됩니다.
# assistant : 질문을 요청 하기 보다는 이전 대화를 저장하고 연속성을 유지하기 위해 사용되며 이어지는 답변에 영향을 줄수 있습니다. 이전 내용을 바탕으로 프롬프트를 요청 하고자 할때 사용 하실 수 있습니다.
# user : chatGPT에 일반적으로 질문하는 질문 내용. 

choice : openAI API의 응답구조에서 사용되는 용어로, 챗봇이나 언어 모델이 생성할 수 있는 여러 가능한 응답 중 하나를 나타냄.
주어진 입력에 대해 다양한 가능한 출력을 생성할 수 있다. 이러한 각각의 출력을 choice 라고 부름.

언어모델에게 특정 질문을 제시했을 때, 모델은 그 질문에 대한 여러 다른 답변을 생각해냄.
이러한 다양한 답변 중 일부를 choices 라는 배열로 반환, 각각의 답변은 choice 객채로 표현됨.

-> ["choice"][0] = 모델이 생성한 첫 번째 가능한 응답을 나타냄. 일반적으로 가장 관련성 놓고 적합한 응답으로 간주됨.
(메시지 내용, 추가적인 메타 데이터 등을 포함함)
["message"]["content"]는 해당 "choice"의 실제 메시지 내용을 추출. 
이것은 챗봇이 마지막 사용자 질문에 대해 생성한 답변.

온도(temperature) - 주로 0.5~1.0 사이 값 사용. 기본값은 0.7.
: 다양성 정도를 나타내며, 값이 높을수록 창의적인 결과물 출력하고 낮을수록 일관성있는 결과물 출력.

텍스트의 최대 길이(max_tokens)
: 생성되는 텍스트의 최대 길이를 지정하는 값. 기본값은 256, 최대값은 2048.
